(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{392:function(e,t,n){"use strict";n.r(t);var r=n(45),o=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"next-js-config"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#next-js-config"}},[e._v("#")]),e._v(" Next.js Config")]),e._v(" "),n("p",[n("code",[e._v("process.env.XXXX")]),e._v(" 의 값은 build 시에 문자열 값으로 바뀐다. "),n("code",[e._v("next start")]),e._v(" 로 실행하더라도, build 시에 문자열로 변환되어있기 때문에 값은 변경되지 않는다.\n그런 이유로 Docker Container 에서 사용하기는 어렵다.")]),e._v(" "),n("p",[e._v("page 들은 "),n("code",[e._v("getServerSideProps")]),e._v(" 등을 사용하더라도, 환경변수를 사용한 부분들은 pre-render 되면서 문자열로 고정되어 html 로 빌드된다. 따라서 "),n("code",[e._v("process.env.XXXX")]),e._v(" 값으로 치환하기가 곤란하다.")]),e._v(" "),n("p",[n("code",[e._v("pages/api/xxxx")]),e._v(" 형식의 API Endpoint 들은 pre-render 되지 않으므로 "),n("code",[e._v("process.env.XXXX")]),e._v(" 값을 사용하는건 가능.\n하지만, 이것 역시 build 시에 문자열로 변환되기 때문에, 환경변수를 수정하더라도 값은 변경되지 않는다.")]),e._v(" "),n("p",[e._v("여러모로, Docker Image + 환경변수 조합으로 처리하기 곤란하다!")])])}),[],!1,null,null,null);t.default=o.exports}}]);